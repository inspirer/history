#   intro
#
#   C Compiler project (cc)
#   Copyright (C) 2002-03  Eugeniy Gryaznov (gryaznov@front.ru)
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


	This file describes some principles which can help you in code understanding.

	1) Memory allocation

	There is only one way to allocate memory during the compilation: get it from slab.
	All information is divided into two part: temporary (Nodes, Expresions) and static
	(func declaration, type definitions etc.). As soon as temporary information is not
	needed no more, the whole slab is freed. Each slab is either temporary, or static.

	2) Errors in expressions

	If an expression has semantic or syntax error, the value associated with it is set to
	NULL. If even one of subexpressions is NULL, the whole expression must be NULL.
	restype member of Expr must always be not NULL.

	3) Errors in Type

	T() == t_bad

	4) Errors in Sym

	GOOD/BAD(sym)
	makebad(sym)

	5) Coding style

	tab = 4 spaces
	
	st1 means stage one, the syntax analysis
	st2 means stage two, .......
