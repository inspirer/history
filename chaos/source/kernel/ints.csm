 // interrupts/exeptions in ChaOS kernel

 exc_00: // Division by zero
   mov ebx,0x0;jmp fault

 exc_01: // Debug exeption
   mov ebx,0x1;jmp fault

 exc_02: // NMI
   mov ebx,0x2;jmp fault

 exc_03: // Break point
   mov ebx,0x3;jmp fault

 exc_04: // Overflow
   mov ebx,0x4;jmp fault

 exc_05: // BOUND error
   mov ebx,0x5;jmp fault

 exc_06: // Invalide opcode
   mov ebx,0x6;jmp fault

 exc_08: // Double fault
   pop eax;pop ebx;shl ebx,16;mov bx,0x8
   jmp debug

 exc_09: // ???
   mov ebx,0x9;jmp fault

 exc_0A: // Wrong TSS
   mov ebx,0xA;jmp fault

 exc_0B: // Segment not present
   mov ebx,0xB;jmp fault

 exc_0C: // Stack error
   mov ebx,0xC;jmp fault

 exc_0D: // GPF
   mov ebx,0xD;jmp fault

 exc_0E: // Page fault
   mov ebx,0xE;jmp fault

 exc_0F: // ???
   mov ebx,0xF;jmp fault

 exc_10: // FPU error
   mov ebx,0x10;jmp fault

 exc_11: // BOUND
   mov ebx,0x11;jmp fault

 oth_exc: // other (undoc)
   mov ebx,0x1111;jmp fault

 // Fault : EBX = NUM
 fault:
   pop ebp;pop eax
 debug:
   mov dx,mem_kernel_data;mov ds,dx;mov es,dx;mov ss,dx
   mov esp,stack;mov esi,ebx;mov edi,eax;mov ecx,1
   jmp exit

 _show_kernel_error: // DS:EBX = (char *)string
   mov dx,mem_kernel_data;mov es,dx;mov ss,dx;mov esp,stack
   xor edi,edi;mov di,w:cs:[dos_vm_call];shl edi,4
   movzx esi,w:cs:[dos_vm_call.4];add edi,esi
   mov si,mem_all_data;mov es,si;mov esi,ebx
   { lodsb;stosb;cmp al,0;jnz ?^0 }
   mov ecx,2;mov ds,dx;mov es,dx
   jmp exit

 // OS startup => sti
enable_int_system:

   // Master ctrl init
   mov al,0x11
   out 0x20,al  // ltime = 0 ; SNLG = 0 ; IC4 = 1
   mov al,0x78
   out 0x21,al  // base vect (8-0xFF)
   mov al,4
   out 0x21,al  // slave to IRQ 2
   mov al,1
   out 0x21,al  // Set system

   // Slave ctrl init
   mov al,0x11
   out 0xA0,al
   mov al,0x70
   out 0xA1,al
   mov al,2
   out 0xA1,al
   mov al,1
   out 0xA1,al

   // Set timer
   mov al,0x36;out 0x43,al
   mov ax,timer;mov dx,0x40
   out dx,al;mov al,ah;out dx,al

   mov al,0xFC;out 0x21,al
   mov al,0xFF;out 0xA1,al

   mov  al,0x2D
   out  0x70,al
   sti
   ret

 // OS finished => cli
disable_int_system:

   cli
   mov  al,0xAD
   out  0x70,al

   // Init master IRQ controller
   mov al,0x11
   out 0x20,al  // ltime = 0 ; SNLG = 0 ; ICW4 present
   mov al,8
   out 0x21,al  // base vect (0x8-0xFF)
   mov al,4
   out 0x21,al  // slave to IRQ 2
   mov al,1
   out 0x21,al  // Set system

   // Init Slave IRQ ctrl
   mov al,0x11
   out 0xA0,al
   mov al,0x70
   out 0xA1,al
   mov al,2
   out 0xA1,al
   mov al,1
   out 0xA1,al

   // Set timer
   mov al,0x36;out 0x43,al
   mov ax,0;mov dx,0x40
   out dx,al;mov al,ah;out dx,al

   mov al,0
   out 0x21,al
   out 0xA1,al
   ret

 // int70-75 (reserved)

 // int 76,77
int_76:
int_77:
   d:cs:[0]=0
   iret

 // coprocessor int
exc_07:
   push ds;push esi;push eax;push ebx
   mov ax,mem_idt_gdt_data;mov ds,ax;clts

   // Save
   mov bx,w:cs:[prev_TID];xor esi,esi;mov si,bx;add esi,0x805
   mov al,b:[esi];mov b:[esi],0x92;push esi;push ds;mov ds,bx
   mov esi,_tss_copr;mov b:[esi],1;inc esi;fsave [esi]
   pop ds;pop esi;mov b:[esi],al

   // Load
   xor esi,esi;str bx;mov si,bx;add esi,0x805;mov al,b:[esi]
   mov b:[esi],0x92;push eax;push esi;push ds;mov ds,bx
   mov esi,_tss_copr;mov al,b:[esi]
   if (al==1){ inc esi;frstor [esi] }
   pop ds;pop esi;pop eax;mov b:[esi],al

   // save TaskID
   mov ax,mem_kernel_data;mov ds,ax;mov w:[prev_TID],bx

   pop ebx;pop eax;pop esi;pop ds
   iret

prev_TID: dw 0

 // TIMER interrupt (1kHz)
int_78:
   push eax
   mov al,0x20
   out 0x20,al
   if (w:cs:m_task_en!=1){
     pop eax
     iret
   }

   test b:[esp.12.2],2
   jz int_78_386
   pop eax;iret

int_78_386:
   push ds
   mov ax,mem_kernel_data;mov ds,ax
   dec w:[task_lft]

   if (w:[task_lft]==0){

      // search for task
      push esi;push edi;xor esi,esi
      mov si,w:[task_no]
      mov edi,process_list_end
      {
         lodsd
         if(ax!=0){
           mov w:[task_no],si
           mov w:[task_lft],ax
           mov edi,eax
           shr edi,16
           mov w:[task_PID],di
           jmp ?v1
         }
         if (edi==esi){ mov esi,process_list }
         jmp ?^0
      }
      pop edi;pop esi

      // Switch next (if more then one task)
      str ax
      if (w:task_PID!=ax){
        jmpf d:[task_no]
      }
   }

   pop ds;pop eax
   iret

 // int79-7F (reserved)

task_no  : dw process_list+4    // Offset of next task
task_lft : dw default_prior     // Left tics for curr task
task_PID : dw 0                 // Current task PID
m_task_en: dw 0                 // OS status: 0-load;1-multitasking;2-closing

low_mem: db "ERROR: not enough memory for kernel\n",0
