 // ChaOS kernel Loader
#output chaos.com
#org 0x100
#code 16

  jmp start
    #include source\kernel\crt.ch
  start:

  mov  sp,kernelloader.new_stack
  push 0
  mov  ah,9
  mov  dx,starting
  int  0x21

  // Open kernel
  mov  ax,0x3D00
  mov  dx,kern
  int  0x21
  mov  bx,ax

  {
    jnc ?v0
    mov  ah,9
    mov  dx,kern_not_found
    int  0x21
    ret
  }

  // Read kernel
  mov  ah,0x3F
  mov  cx,50000
  mov  dx,kernel
  int  0x21
  mov  w:[kern_size16],ax

  {
    {
      jc  ?v0
      cmp ax,5000
      jge ?v1
    }
    mov  ah,9
    mov  dx,kern_damaged
    int  0x21
    ret
  }

  // Close
  add  ax,kernel
  push ax
  mov  ah,0x3E
  int  0x21
  pop  ax

  // prepeare : ds,cs,forgdt,k_cs,k_ds
  mov   w:[stack],sp
  push  ax
  mov   ax,cs
  mov   w:[oldseg],ax
  mov   w:[kernelloader.dos_call_addr],ax
  movzx eax,ax
  shl   eax,4
  or    d:[des_ds+2],eax
  or    d:[des_cs+2],eax
  mov   bx,mgdt
  movzx ebx,bx
  add   ebx,eax
  or    d:[forgdt+2],ebx
  mov   bx,kernelloader
  movzx ebx,bx
  add   ebx,eax
  or    d:[kerloader_cs+2],ebx
  or    d:[kerloader_ds+2],ebx

  // calculate address for mini_drivers
  pop   bx
  movzx ebx,bx
  add   ebx,eax
  add   ebx,15
  and   bx,0xFFF0
  mov   d:[kernelloader.mini_driver],ebx
  shr   ebx,4

  // open minidriver
  mov  ax,0x3D00
  mov  dx,sstruct
  int  0x21

  {
    jnc ?v0
    mov  ah,9
    mov  dx,sstruct_not_found
    int  0x21
    ret
  }

  push ds
  mov  ds,bx
  mov  bx,ax


  // Read minidriver
  xor edi,edi
  {
    mov  ah,0x3F
    mov  cx,4096
    xor  dx,dx
    int  0x21
    {
      jnc  ?v0
      xor  edi,edi
      jmps ?v1
    }
    cmp  ax,0
    jz   ?v0
    movzx eax,ax
    add  edi,eax
    mov  ax,ds
    add  ax,0x100
    mov  ds,ax

    shr  ax,8
    cmp  ax,0x80
    jng  ?^0
    pop  ds
    mov  ah,9
    mov  dx,sstruct_big
    int  0x21
    ret
  }
  pop ds
  mov  d:[kernelloader.mini_driver.4],edi

  {
    cmp  edi,50
    jge  ?v0
    mov  ah,9
    mov  dx,sstruct_damaged
    int  0x21
    ret
  }

  // Close sstruct.bin
  mov  ah,0x3E
  int  0x21

  cli
  mov  al,0xAD
  out  0x70,al

  // Load GDT
  lgdt [forgdt]

  // Open A20
  mov  al,0xD1
  out  0x64,al
  mov  al,0xDF
  out  0x60,al

  // Switch PM
  mov  eax,cr0
  or   al,1
  mov  cr0,eax

  jmpf $+5,0x8

  mov  ax,0x10
  mov  ds,ax
  mov  ss,ax

  jmpf 0,0x18

exit:

  // Switch to Real
  mov  eax,cr0
  and  al,0xfe
  mov  cr0,eax
  db   0xea
  dw   $+4
oldseg:
  dw 0

  mov  sp,cs:w:[stack]
  mov  ax,cs
  mov  ds,ax
  mov  ss,ax
  mov  es,ax
  lidt [foridt16]

  // Close A20
  mov  al,0xD1
  out  0x64,al
  mov  al,0xDD
  out  0x60,al

  mov  al,0x2D
  out  0x70,al
  sti

  {
    cmp  ecx,1
    jnz  ?v0
    printf("Exception \H at \H : \H\n",esi,edi,ebp)
  }
  {
    cmp  ecx,2
    jnz  ?v0
    printf(kernel)
  }

  mov  ah,9
  mov  dx,chaos_finished
  int  0x21

  ret

dos_vm_call:

  nop
  int  0x21
  int  0xFF

mgdt:
des_null:     dd 0,0
des_cs:       dw 0FFFF,0,0x9A00,0
des_ds:       dw 0FFFF,0,0x9200,0
kerloader_cs: dw 0FFFF,0,0x9A00,0x40
kerloader_ds: dw 0FFFF,0,0x9200,0        // Data
kerloader_es: dw 255,0,0x9210,0x80       // Memory (at 1Mb, size: 1Mb)

#shortdef gdt_size_16 $-mgdt-1

foridt16:
  dw 4*256-1
  dd 0

stack:
  dw 0

starting:          db 13,10,"Starting ChaOS/alpha ...",13,10,36
kern:              db "kernel.bin",0
kern_not_found:    db "ERROR: kernel file not found",13,10,36
kern_damaged:      db "ERROR: kernel file damaged",13,10,36
sstruct:           db "sstruct.bin",0
sstruct_not_found: db "ERROR: sstruct.bin not found",13,10,36
sstruct_big:       db "ERROR: sstruct.bin file is too big",13,10,36
sstruct_damaged:   db "ERROR: sstruct.bin file damaged",13,10,36
chaos_finished:    db "ChaOS/alpha finished",13,10,36
#data

kernelloader:
#org 0
#code 32

#shortdef gdt_place  0x800
#shortdef kern_place 0x11000 // After IDT & GDT

   // ds - data ; es - memory for kernel ; !!! stack not defined !!!
   mov  ax,0x20
   mov  ds,ax
   mov  ax,0x28
   mov  es,ax

   // Clear IDT/GDT
   xor  edi,edi
   xor  eax,eax
   mov  ecx,0x10800
   rep stosb

   // copy new GDT
   mov  edi,gdt_place
   mov  esi,gdtstart
   mov  ecx,gdt_size
   rep movsb

   // Load new IDT
   lidt [foridt32]

   // copy Kernel
   mov  edi,kern_place
   mov  esi,kernel32
   mov  ecx,d:[kern_size32]
   rep movsb

   // append return code to kernel
   mov  esi,ret_to_loader
   mov  ecx,ret_to_loader_size
   rep movsb

   // load new GDT
   lgdt [forgdt32]

   // switch to kernel
   jmpf 0,0x8

ret_addr:
   jmpf exit,0x8

gdtstart:
  #include source\kernel\gdt.csm
#shortdef gdt_size $-gdtstart

ret_to_loader:
  jmpf ret_addr,0x18

forgdt16:
  dw gdt_size_16
  dd 0

dos_call_addr:
  dw 0
  dw dos_vm_call
  dw kernel

mini_driver:
  dd 0
  dd 0

#shortdef forgdt forgdt16+kernelloader
#shortdef ret_to_loader_size $-ret_to_loader

foridt32:
  dw 2047
  dd 0x100000

forgdt32:
  dw 0xFFFF
  dd 0x100800

kern_size32:
  dd 0
#shortdef kern_size16 kern_size32+kernelloader

#shortdef new_stack $+400

// Here we load kernel
#shortdef kernel32 new_stack+2
#shortdef kernel   kernelloader+kernel32
