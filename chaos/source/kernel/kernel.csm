 // ChaOS kernel v0.99
#output kernel.bin
#include source\kernel\kern_def.csm
#code 32
#org 0

   // Initialization (ds=Data,es=IDT/GDT,ss=Data)
   ax=mem_kernel_data;ds=ax;ss=ax;fs=ax;gs=ax
   ax=mem_idt_gdt_data;es=ax;sp=stack

   // Create new IDT
   xor edi,edi
   esi=idt_place
   ecx=idt_size
   rep movsb
   mov ecx,2048-idt_size
   xor eax,eax
   rep stosb

   // Get memory size (in pages)
   ecx=d:mem_size;ax=mem_all_data;ds=ax;ebx=ecx<<12
   while(ebx!=0){
     d:[ebx]=ecx
     ifelse(d:[ebx]!=ecx){ xor ebx,ebx } else { ebx=+4096;ecx=++ }
   }
   ax=mem_kernel_data;ds=ax;d:mem_size=ecx

   // Create page catalog (ecx = pages) at 0x121000
   dx=cx&1023    // dx!=0 => need increment
   ebx=ecx>>10;if (dx!=0){ebx=++}  // ebx = num of tables

   // Save size of table
   eax=ebx;edi=0x818;stosw // Descriptor of page catalog
   eax=+0x122;d:mem_base=eax // Save memory base

   // Fill tables
   esi=1024-ebx  // other we'll fill with nulls
   ax=mem_page_catalog;es=ax;xor edi,edi
   eax=0x122007  // pointer to first "table of pages"(R/W,Present,User)
   while(ebx>0){ stosd;eax=+0x1000;ebx=-- }
   xor eax,eax;while(esi>0){ stosd;esi=-- }

   // Create page tables (ecx = pages;edi = pointer to first table)
   dx=cx&1023;eax=7 // pointer to first page (R/W,Present,User)
   ebx=ecx;{ stosd;eax=+0x1000;loop ?^0 }
   cx=(1024-dx)&1023;xor eax,eax
   while(ecx>0){ stosd;ecx=-- }

   // Set kernel pages as System
   push ds;ax=mem_page_catalog;ds=ax
   edi=cs:d:mem_base<<2+0x1000 // <- end of system pages
   esi=0x1400                  // <- start of system pages
   while(esi<edi){
       lodsd
       and eax,0xFFFFF000
       add eax,busy_page+fixed_page+3 //(R/W, SuperVis, Present, fixed, busy)
       d:[~esi-4]=eax
   }
   pop ds;ax=mem_idt_gdt_data;es=ax

   // install PAGES system
   eax=0x121000;cr3=eax
   eax=cr0
   eax=|0x80000000
   cr0=eax
   jmpf $+7,0x8

   // Load NULL as LDT
   xor ax,ax;lldt ax

   // Create kernel TSS
   ah=6;ebx=1;int 0x20;push ds
   push eax

   // Clear it
   ds=ax;xor esi,esi;ecx=1024
   { d:[esi]=0;esi=+4;loop ?^0 }
   eax=cr3;d:[0x1C]=eax
   w:[0x66]=104;d:[0x168]=0xFFFFFFFF

   // Set it as Main TSS
   pop eax;bx=mem_idt_gdt_data;ds=bx;
   xor esi,esi;si=ax;esi=+0x805
   b:[esi]=0x89;pop ds;ltr ax
   w:kernel_PID=ax

   // Clear process_list
   ecx=max_process
   esi=process_list
   { d:[esi]=0;esi=+4;loop ?^0 }

   // VM00 task
   init_VM_task()

   // Enable ints
   enable_int_system()

   // registry
   reg_init()

   // drivers
   init_drivers()

   // switch task
   cli
   w:m_task_en=multitasking
   ax=mem_kernel_data;ds=ax

   // Jmp first task
load_next_task:
   jmpf d:cs:[xtask]

   // Signal to kill task
   xor ebx,ebx;bx=w:kill_task;ah=0x22;int 0x20

   // search for next task
   esi=process_list
   ecx=max_process
   {
      lodsd
      if(ax!=0){
        w:task_no=si
        w:task_lft=ax
        eax=>>16
        w:task_PID=ax
        w:xtask_PID=ax
        jmp load_next_task
      }
      loop ?^0
   }

   // Exit to DOS (no errors)
_dos_exit:
   w:m_task_en=2
   xor ecx,ecx
   jmp exit

#shortdef xtask $-4
xtask_PID   : dw 0

#shortdef kernel_switch $-4
kernel_PID  : dw 0
kill_task: dw 0

   // ------------------------------ [ Data ] ------------------------------

    // Interrupt descriptor table
   idt_place:
     #include source\kernel\idt.csm
   #shortdef idt_size $-idt_place

   // ------------------------[ built-in Drivers ]---------------------------

  // Int 20
  #include source\kernel\memory.csm
  #include source\kernel\process.csm
  #include source\kernel\regman.csm

  // Int 21
  #include source\kernel\filesyst.csm
  #include source\kernel\scr_io.csm

  #include source\kernel\ints.csm
  #include source\kernel\driver.csm
  #include source\kernel\vmm.csm

   // ------------------------ [ Return to loader ] ------------------------
exit:

   // Disable ints
   disable_int_system()

   // Deinstall page system
   eax=cr0
   eax=<1;al=&0xFE;eax=>1
   cr0=eax
   xor eax,eax;cr3=eax

   // Deinstall task system
   eax=0x3002;push eax;popf
   clts

   // Load old GDT & return
   lgdt cs:[ret_gdt]

#shortdef ret_to_loader $
  // Here loader places code to return (far jump)

#shortdef ret_gdt       $+7
  // And here Pointer to old GDT

#shortdef dos_vm_call   $+13
  // addr of dos_VM_call <w:cs>:<w:ip>:<w:data>

#shortdef stack     $+19+stacksize
  // Define Stack

#shortdef dos_func_stack stack+dosfstck
  // Define doscall stack

#shortdef process_list      dos_func_stack+1
#shortdef process_list_size max_process*4
  // Define process list position DWORD: <PID(w):PRIOR(w)>
#shortdef process_list_end process_list_size+process_list

#shortdef VM_TSS process_list_end+4
  // main VM TSS copy (104 bytes length)

#shortdef xend VM_TSS+104
