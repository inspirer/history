 // File system routines

  int_21:
    clc;push ebp
    mov ebp,esp
    and b:[~ebp+12],0xFE
    pop ebp

    // check
    check_first_ring()
    if (~c){ ax=err_access_denied;jmp set_cf }

    cmp ah,0x0 ; jz  CreateFile
    cmp ah,0x1 ; jz  OpenFile
    jmp int21_f0

    // 1. Create file
    //   In:  ah  = 0 ; cx  = File attribute
    //        ds:esi - Name (ASCIIZ)
    //   Out: CF set on error (ax = dos error code)
    //        ax  = file handle
  CreateFile:
    push edi;push es;push ebx;push esi

    // prepare ES:EDI
    xor edi,edi;di=w:cs:dos_vm_call;edi=<<4
    movzx esi,w:cs:dos_vm_call.4;add edi,esi
    si=mem_all_data;es=si

    // prepare registers
    push ds;si=mem_kernel_data;ds=si
    ah=0x3C;w:[VM_TSS.tss_eax]=ax
    ax=w:[dos_vm_call.4]
    w:[VM_TSS.tss_edx]=ax
    w:[VM_TSS.tss_ecx]=cx
    pop ds;pop esi;push esi

    // Copy filename to dos buffer
    { lodsb;stosb;cmp al,0;jnz ?^0 }

    // Call it
    call_VM_task();

    if (ebx!=0){
      pop esi;pop ebx;pop es;pop edi
      jmp set_cf
    }

    // Restore
    pop esi;pop ebx;pop es;pop edi
    iret

    // 2. Open file
    //   In:  ah  = 1
    //        al  = access mode (0-read, 1-write, 2-r/w)
    //        ds:esi - Name (ASCIIZ)
    //   Out: CF set on error (ax = dos error code)
    //        ax  = file handle
  OpenFile:
    push edi;push es;push ebx;push esi

    // prepare ES:EDI
    xor edi,edi;di=w:cs:dos_vm_call;edi=<<4
    movzx esi,w:cs:dos_vm_call.4;add edi,esi
    si=mem_all_data;es=si

    // prepare registers
    push ds;si=mem_kernel_data;ds=si
    ah=0x3D;w:[VM_TSS.tss_eax]=ax
    ax=w:[dos_vm_call.4]
    w:[VM_TSS.tss_edx]=ax
    pop ds;pop esi;push esi

    // Copy filename to dos buffer
    { lodsb;stosb;cmp al,0;jnz ?^0 }

    // Call it
    call_VM_task();

    if (ebx!=0){
      pop esi;pop ebx;pop es;pop edi
      jmp set_cf
    }

    // Restore
    pop esi;pop ebx;pop es;pop edi
    iret

int21_f0:
    cmp ah,0x2 ; jz  CloseFile
    jmp int21_f1

    // 3. Close file
    //   In:  ah  = 2 ; bx  = file handle
    //   Out: CF set on error (ax = dos error code|ax=undef)
  CloseFile:
    push ebx;push ds;push es

    // prepare registers
    ax=mem_kernel_data;ds=ax;es=ax
    w:[VM_TSS.tss_eax]=0x3E00
    w:[VM_TSS.tss_ebx]=bx
    xor eax,eax

    // Call it
    call_VM_task()

    // Restore
    pop es;pop ds;pop ebx
    iret

    // 4. Read file
    //   In:  ah  = 3
    //        bx  = file handle
    //        cx  = bytes to read
    //        es:edi - buffer
    //   Out: CF set on error (ax = dos error code)
    //        ax  = bytes actually read
  ReadFile:
    push esi;push edi;push ds;push ebx

    // prepare registers
    ax=mem_kernel_data;ds=ax
    w:[VM_TSS.tss_eax]=0x3F00
    w:[VM_TSS.tss_ebx]=bx
    w:[VM_TSS.tss_ecx]=cx
    ax=w:[dos_vm_call.4]
    w:[VM_TSS.tss_edx]=ax
    xor eax,eax

    // Call it
    call_VM_task()

    // All OK?
    ifelse (ebx==0){

      // Yes
      push eax;push eax

      // DS:ESI
      xor esi,esi;si=w:cs:dos_vm_call;esi=<<4
      movzx eax,w:cs:dos_vm_call.4;add esi,eax
      ax=mem_all_data;ds=ax

      // Copy received data & save result
      pop ecx;rep movsb

      // Return OK
      pop eax

    } else {

      // No => set CF
      pop ebx;pop ds;pop edi;pop esi
      jmp set_cf
    }

    // Restore
    pop ebx;pop ds;pop edi;pop esi
    iret

  int21_f1: // Continue check
    cmp ah,0x3 ; jz  ReadFile
    cmp ah,0x4 ; jz  WriteFile
    jmp int21_f2

    // 5. Write file
    //   In:  ah  = 4 ;  bx  = file handle
    //        cx  = bytes to write (0-truncate)
    //        ds:esi - buffer
    //   Out: CF set on error (ax = dos error code)
    //        ax  = bytes actually written
  WriteFile:
    iret

int21_f2:
    cmp ah,0x9 ; jz find_first
    jmp int21_f3

    // 10. FindFirst
    //   In:  ah  = 9
    //        ds:esi - filespec
    //        es:edi - Place for FileInfoRec
    //        cx  = attributes
    //   Out: CF set on error (ax = dos error code)
  find_first:
    push eax;push ebx;push ecx;push ds;push es;push edi;push esi

    // prepare DTA
    push ebx;push ds;push es
    ax=mem_kernel_data;ds=ax;es=ax
    w:[VM_TSS.tss_eax]=0x1A00
    ax=w:[dos_vm_call.4]
    w:[VM_TSS.tss_edx]=ax
    xor eax,eax
    call_VM_task()
    pop es;pop ds;pop ebx

    // prepare ES:EDI
    xor edi,edi;di=w:cs:dos_vm_call;edi=<<4
    movzx esi,w:cs:dos_vm_call.4;add edi,esi;edi=+50
    si=mem_all_data;es=si

    // prepare registers
    push ds;si=mem_kernel_data;ds=si
    ah=0x4E;w:[VM_TSS.tss_eax]=ax
    ax=w:[dos_vm_call.4]+50
    w:[VM_TSS.tss_edx]=ax
    w:[VM_TSS.tss_ecx]=cx
    pop ds;pop esi;push esi

    // Copy filemask to dos buffer
    { lodsb;stosb;cmp al,0;jnz ?^0 }

    // Call it
    call_VM_task();

    pop esi;pop edi;pop es
    if (ebx!=0){
      pop ds;pop ecx;pop ebx;pop eax
      jmp set_cf
    }

    push edi;push esi

    // DS:ESI
    xor esi,esi;si=w:cs:dos_vm_call;esi=<<4
    movzx eax,w:cs:dos_vm_call.4;add esi,eax
    ax=mem_all_data;ds=ax

    // Copy received data & save result (44 bytes)
    ecx=11;rep movsd

    // Restore
    pop esi;pop edi;pop ds;pop ecx;pop ebx;pop eax
    iret

int21_f3:
    cmp ah,0xA ; jz find_next
    jmp int21_s0

    // 11. FindNext
    //   In:  ah  = 10
    //        ds:esi - previous FileInfoRec
    //   Out: CF set on error (ax = dos error code)
  find_next:
    push eax;push ebx;push ecx;push es;push edi;push ds;push esi

    // prepare DTA
    push ebx;push ds;push es
    ax=mem_kernel_data;ds=ax;es=ax
    w:[VM_TSS.tss_eax]=0x1A00
    ax=w:[dos_vm_call.4]
    w:[VM_TSS.tss_edx]=ax
    xor eax,eax
    call_VM_task()
    pop es;pop ds;pop ebx

    // prepare ES:EDI
    xor edi,edi;di=w:cs:dos_vm_call;edi=<<4
    movzx esi,w:cs:dos_vm_call.4;add edi,esi
    si=mem_all_data;es=si

    // prepare registers
    push ds;si=mem_kernel_data;ds=si
    ah=0x4F;w:[VM_TSS.tss_eax]=ax
    ax=w:[dos_vm_call.4]
    w:[VM_TSS.tss_edx]=ax
    pop ds;pop esi;push esi

    // Copy FileInfoRec to DOS
    ecx=11;rep movsd

    // Call it
    call_VM_task();

    if (ebx!=0){
      pop esi;pop ds;pop edi;pop es;pop ecx;pop ebx;pop eax
      jmp set_cf
    }

    pop edi;pop es;push es;push edi

    // DS:ESI
    xor esi,esi;si=w:cs:dos_vm_call;esi=<<4
    movzx eax,w:cs:dos_vm_call.4;add esi,eax
    ax=mem_all_data;ds=ax

    // Copy received data & save result (44 bytes)
    ecx=11;rep movsd

    // Restore
    pop esi;pop ds;pop edi;pop es;pop ecx;pop ebx;pop eax
    iret
