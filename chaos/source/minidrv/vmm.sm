#include "source\minidrv\mdrv.h"

  db "CD",26               // ID
  db "sys_vm_task",[2]     // device name
  dd 0                     // interface procedure
  dd mdata                 // block of data to fill
  dd init_VM_task          // initialization procedure
  dw 4                     // size of mdriver in pages
  dw 0                     // (reserved)

#code 32
#org 0

// VM Stack
#define vm_ds 32
#define vm_ss 24
#define vm_sp 20
#define vm_fl 16
#define vm_cs 12
#define vm_ip 8

// TSS defs
#define tss_eax 40
#define tss_ebx 52
#define tss_ecx 44
#define tss_edx 48
#define tss_edi 68
#define tss_esi 64

// data define
#define ring00stack 2040
#define VM_TSS      2048

 // Init main virtual mode task
init_VM_task:

   push es;push ds;push esi

   // Allocate memory for VM_TSS
   mov ebx,1;mov ah,6;int 0x20

   // Fill it (Create basic values)
   push ax;mov ds,ax;xor esi,esi
   mov d:[esi],esi;add esi,4

   // Stack0
   mov eax,data.ring00stack;mov d:[esi],eax;add esi,4
   movzx eax,w:cs:[_ds];mov d:[esi],eax;add esi,4

   // Stack1/2
   xor eax,eax
   mov d:[esi],eax;add esi,4;mov d:[esi],eax;add esi,4
   mov d:[esi],eax;add esi,4;mov d:[esi],eax;add esi,4

   // CR3, EIP, EFLAGS
   mov eax,cr3;mov d:[esi],eax;add esi,4
   xor eax,eax;mov ax,w:cs:[dos_vm_call.2];mov d:[esi],eax;add esi,4
   mov eax,0x20202;mov d:[esi],eax;add esi,4

   // eax,ecx,edx,ebx
   xor eax,eax
   mov d:[esi],eax;add esi,4;mov d:[esi],eax;add esi,4
   mov d:[esi],eax;add esi,4;mov d:[esi],eax;add esi,4

   // esp,ebp,esi,edi
   mov eax,0xFFFE;mov d:[esi],eax;add esi,4;mov d:[esi],eax;add esi,4
   xor eax,eax;mov d:[esi],eax;add esi,4;mov d:[esi],eax;add esi,4

   // es, cs, ss, ds, fs, gs
   xor eax,eax;mov ax,w:cs:[dos_vm_call]
   mov d:[esi],eax;add esi,4;mov d:[esi],eax;add esi,4
   mov d:[esi],eax;add esi,4;mov d:[esi],eax;add esi,4
   mov d:[esi],eax;add esi,4;mov d:[esi],eax;add esi,4

   // LDT, IO_BASE
   xor eax,eax;mov d:[esi],eax;add esi,4
   mov eax,0x680000;mov d:[esi],eax

   // Fill IOmap with nulls (and put at end 0xFFFFFFFF)
   mov ecx,64;xor eax,eax { add esi,4;mov d:[esi],eax;loop up(00) }
   add esi,4;xor eax,eax;dec eax;mov d:[esi],eax

   // Save VM TSS
   mov ax,w:cs:[_ds];mov es,ax;mov ecx,26
   xor esi,esi;mov edi,data.VM_TSS;rep movsd

   // Fix in GDT TSS type (0x89)
   mov ax,mem_idt_gdt_data;mov ds,ax
   xor esi,esi;pop ax;mov si,ax;add esi,0x805
   mov b:[esi],0x89

   // Clear HIGH_EAX
   rol eax,16;shr eax,16

   pop esi;pop ds;pop es
   mov w:[vm_task.4],ax

   // install handler
   mov ax,0xD;mov bx,cs;mov edx,exc_0D;call kernel
   mov ax,0x21;mov bx,cs;mov edx,int_21;call kernel
   mov ax,0x76;mov bx,cs;mov edx,int_76;call kernel
   mov ax,0x77;mov bx,cs;mov edx,int_77;call kernel
   retf

// call Virtual Mode Task
sys_VM_task:

   // Set VM TSS as data
   push es;push ds;push esi;push edi;push ecx
   mov ax,mem_idt_gdt_data;mov ds,ax
   xor esi,esi;mov ax,w:cs:[vm_task.4];mov si,ax;add esi,0x805
   mov b:[esi],0x92;push ds;push esi

   // Copy
   mov es,ax;mov ax,w:cs:[_ds];mov ds,ax;inc d:[vm_task]
   xor edi,edi;mov esi,data.VM_TSS;mov ecx,26;rep movsd

   // Return TSS type
   pop esi;pop ds;mov b:[esi],0x89
   mov ax,w:cs:[_ds];mov es,ax

   // Disable ints
   push ebx
   in al,0x21;mov bl,al;in al,0xA1;mov bh,al
   mov al,0xFF;out 0x21,al;out 0xA1,al

   // Call VM00
   sldt ax
   callf d:cs:[vm_task]
   lldt ax

   // Restore ints
   mov al,bl;out 0x21,al
   mov al,bh;out 0xA1,al
   pop ebx

   // Set DATA type
   mov b:[esi],0x92;push ds;push esi

   // Get EAX & CF
   mov ax,w:cs:[vm_task.4];mov ds,ax
   mov eax,d:[tss_eax];mov ebx,d:[tss_ebx]
   and ebx,1;mov ecx,d:[tss_edx]

   // Restore type
   pop esi;pop ds;mov b:[esi],0x89

   // Save EDX in VM_TSS
   mov si,w:cs:[_ds];mov ds,si
   mov d:[data.VM_TSS.tss_edx],ecx

   // Restore regs & ret
   pop ecx;pop edi;pop esi;pop ds;pop es
   ret

kernel: callf d:cs:[kern];ret
debug:  jmpf d:cs:[debg]

mdata:
  _ds:  dw 0
  kern: dw [3]
  debg: dw [3]
  dos_vm_call: dw [3]

 // HDD1 interrupt
int_76:
   test b:[esp.8.2],2
   jz brd

   push ebp
   push ebp
   mov ebp,esp
   push eax
   push ebx
   mov ax,mem_all_data;mov fs,ax
   mov ebx,0x76
   jmp emulate_int

brd:
   mov d:cs:[0],0

 // HDD2 interrupt
int_77:
   test b:[esp.8.2],2
   jz brd

   push ebp
   push ebp
   mov ebp,esp
   push eax
   push ebx
   mov ax,mem_all_data;mov fs,ax
   mov ebx,0x77
   jmp emulate_int

 gpf:
   pop ebx;shl ebx,16
   mov bx,0xD;pop ebp;pop eax
   jmp debug

 exc_0D: // GPF => VM or standart
   test b:[esp.12.2],2
   jz gpf

   // VM exeption
   push ebp
   mov ebp,esp
   push eax
   push ebx
   mov ax,mem_all_data;mov fs,ax
   movzx eax,w:[ebp.vm_cs]   // CS
   shl eax,4
   add eax,d:[ebp.vm_ip]     // IP
   movzx ebx,w:fs:[eax]

   // int_XX cmd? ( if (bl==0xCD&&bh!=0xFF) )
   {
     cmp bl,0xCD
     jnz down(00)
     cmp bh,0xFF
     jz  down(00)

     shr ebx,8
     add w:[ebp.vm_ip],2     // Skip int_XX

   emulate_int:
     mov ebx,d:fs:[4*ebx]
     mov ax,bx;shr ebx,16
     xchg bx,w:[ebp.vm_cs]   // Set new CS:IP
     xchg ax,w:[ebp.vm_ip]
     shl ebx,16;mov bx,ax
     sub w:[ebp.vm_sp],6     // Allocate stack space
     movzx eax,w:[ebp.vm_ss]
     shl eax,4
     add eax,d:[ebp.vm_sp]   // Get stack top

     mov d:fs:[eax],ebx     // Save return addr & flags in stack
     mov bx,w:[ebp.vm_fl]
     mov w:fs:[eax.4],bx

     and d:[ebp.vm_fl],0xFFFEFCFF // clear TF, RF, IF

   clear_return:
     pop ebx                // Clear stack & return
     pop eax
     pop ebp
     add esp,4
     iret

   }

   // Return from VM task to host ( if (bl==0xCD) )
   {
      cmp  bl,0xCD
      jnz  down(00)

      pushf
      pop ecx
      or ecx,0x4000
      push ecx
      popf;pop ebx;pop eax
      movzx ebx,w:[ebp.vm_fl]
      iret
   }

   // Emulate IRET (0xCF)  ( if (bl==0xCF) )
   {
      cmp  bl,0xCF
      jnz  down(00)

      movzx eax,w:[ebp.vm_ss]
      shl eax,4
      add eax,d:[ebp.vm_sp]
      add w:[ebp.vm_sp],6     // Get stack top & set new

      mov ebx,d:fs:[eax]
      mov w:[ebp.vm_ip],bx    // CS:IP
      shr ebx,16
      mov w:[ebp.vm_cs],bx
      mov bx,w:fs:[eax.4]    // FLAGS
      mov w:[ebp.vm_fl],bx
      jmp clear_return
   }

   // Cli ( if (bl==0xFA) )
   {
      cmp  bl,0xFA
      jnz  down(00)

      add w:[ebp.vm_ip],1
      and w:[ebp.vm_fl],0xFDFF
      jmp clear_return
   }

   // Sti ( if (bl==0xFB) )
   {
      cmp  bl,0xFB
      jnz  down(00)

      add w:[ebp.vm_ip],1
      or w:[ebp.vm_fl],0x200
      jmp clear_return
   }

   // Pushf ( if (bl==0x9C) )
   {
      cmp  bl,0x9C
      jnz  down(00)

      add w:[ebp.vm_ip],1
      sub d:[ebp.vm_sp],2     // Get stack top & set new sp
      movzx eax,w:[ebp.vm_ss]
      shl eax,4
      add eax,d:[ebp.vm_sp]

      mov bx,w:[ebp.vm_fl]    // Save flags
      mov w:fs:[eax],bx
      jmp clear_return
   }

   // Popf ( if (bl==0x9D) )
   {
      cmp  bl,0x9D
      jnz  down(00)

      add w:[ebp.vm_ip],1
      movzx eax,w:[ebp.vm_ss]
      shl eax,4
      add eax,d:[ebp.vm_sp]
      add w:[ebp.vm_sp],2     // Get stack top & set new

      mov bx,w:fs:[eax]
      mov w:[ebp.vm_fl],bx    // New flags
      jmp clear_return
   }

   // BUG in VM (gpf instructions)
   mov eax,d:[ebp.vm_ip]
   movzx ebx,w:[ebp.vm_cs]
   mov edx,ebx;shl edx,4;add edx,eax
   mov ebp,d:fs:[edx]
   mov ebp,0xFABEA1
   jmp debug

vm_task: dd 0
         dw 0

 // File system routines

 int_21:
   clc;push ebp
   mov ebp,esp
   and b:[~ebp.12],0xFE
   pop ebp

   cmp ah,0x0 ; _jz  CreateFile
   cmp ah,0x1 ; _jz  OpenFile
   cmp ah,0x2 ; _jz  CloseFile
   cmp ah,0x3 ; _jz  ReadFile
   cmp ah,0x4 ; _jz  WriteFile
   cmp ah,0x5 ; _jz  SeekFile
   cmp ah,0x9 ; _jz  find_first
   cmp ah,0xA ; _jz  find_next
   cmp ah,0x30; _jz  display_char
   cmp ah,0x31; _jz  display_string
   mov ax,err_no_support
   jmp set_cf

   // 1. Create file
   //   In:  ah  = 0 ; cx  = File attribute
   //        ds:esi - Name (ASCIIZ)
   //   Out: CF set on error (ax = dos error code)
   //        ax  = file handle
 CreateFile:
   push edi;push es;push ebx;push esi

   // prepare ES:EDI
   xor edi,edi;mov di,w:cs:[dos_vm_call];shl edi,4
   movzx esi,w:cs:[dos_vm_call.4];add edi,esi
   mov si,mem_all_data;mov es,si

   // prepare registers
   push ds;mov si,w:cs:[_ds];mov ds,si
   mov ah,0x3C;mov w:[data.VM_TSS.tss_eax],ax
   mov ax,w:[dos_vm_call.4]
   mov w:[data.VM_TSS.tss_edx],ax
   mov w:[data.VM_TSS.tss_ecx],cx
   pop ds;pop esi;push esi

   // Copy filename to dos buffer
   { lodsb;stosb;cmp al,0;jnz up(00) }

   // Call it
   call sys_VM_task

   { // if (ebx!=0)
     cmp ebx,0
     jz  down(00)

     pop esi;pop ebx;pop es;pop edi
     jmp set_cf
   }

   // Restore
   pop esi;pop ebx;pop es;pop edi
   iret

   // 2. Open file
   //   In:  ah  = 1
   //        al  = access mode (0-read, 1-write, 2-r/w)
   //        ds:esi - Name (ASCIIZ)
   //   Out: CF set on error (ax = dos error code)
   //        ax  = file handle
 OpenFile:
   push edi;push es;push ebx;push esi

   // prepare ES:EDI
   xor edi,edi;mov di,w:cs:[dos_vm_call];shl edi,4
   movzx esi,w:cs:[dos_vm_call.4];add edi,esi
   mov si,mem_all_data;mov es,si

   // prepare registers
   push ds;mov si,w:cs:[_ds];mov ds,si
   mov ah,0x3D;mov w:[data.VM_TSS.tss_eax],ax
   mov ax,w:[dos_vm_call.4]
   mov w:[data.VM_TSS.tss_edx],ax
   pop ds;pop esi;push esi

   // Copy filename to dos buffer
   { lodsb;stosb;cmp al,0;jnz up(00) }

   // Call it
   call sys_VM_task

   { // if (ebx!=0)
     cmp ebx,0
     jz  down(00)

     pop esi;pop ebx;pop es;pop edi
     jmp set_cf
   }

   // Restore
   pop esi;pop ebx;pop es;pop edi
   iret

   // 3. Close file
   //   In:  ah  = 2 ; bx  = file handle
   //   Out: CF set on error (ax = dos error code|ax=undef)
 CloseFile:
   push ebx;push ds;push es

   // prepare registers
   mov ax,w:cs:[_ds];mov ds,ax;mov es,ax
   mov w:[data.VM_TSS.tss_eax],0x3E00
   mov w:[data.VM_TSS.tss_ebx],bx
   xor eax,eax

   // Call it
   call sys_VM_task

   // Restore
   pop es;pop ds;pop ebx
   iret

   // 4. Read file
   //   In:  ah  = 3
   //        bx  = file handle
   //        cx  = bytes to read
   //        es:edi - buffer
   //   Out: CF set on error (ax = dos error code)
   //        ax  = bytes actually read
 ReadFile:
   push esi;push edi;push ds;push ebx

   // prepare registers
   mov ax,w:cs:[_ds];mov ds,ax
   mov w:[data.VM_TSS.tss_eax],0x3F00
   mov w:[data.VM_TSS.tss_ebx],bx
   mov w:[data.VM_TSS.tss_ecx],cx
   mov ax,w:[dos_vm_call.4]
   mov w:[data.VM_TSS.tss_edx],ax
   xor eax,eax

   // Call it
   call sys_VM_task

   // All OK?
   { // ifelse (ebx==0)
     cmp ebx,0
     jnz __ifelse1

     // Yes
     push eax;push eax

     // DS:ESI
     xor esi,esi;mov si,w:cs:[dos_vm_call];shl esi,4
     movzx eax,w:cs:[dos_vm_call.4];add esi,eax
     mov ax,mem_all_data;mov ds,ax

     // Copy received data & save result
     pop ecx;rep movsb

     // Return OK
     pop eax

     {
       jmps down(00)
       // } else {
       __ifelse1:

       // No => set CF
       pop ebx;pop ds;pop edi;pop esi
       jmp set_cf
     }
   }

   // Restore
   pop ebx;pop ds;pop edi;pop esi
   iret

   // 5. Write file
   //   In:  ah  = 4 ;  bx  = file handle
   //        cx  = bytes to write (0-truncate)
   //        ds:esi - buffer
   //   Out: CF set on error (ax = dos error code)
   //        ax  = bytes actually written
 WriteFile:
   push esi;push edi;push ds;push ebx;push es

   // prepare registers
   push ds;mov ax,w:cs:[_ds];mov ds,ax
   mov w:[data.VM_TSS.tss_eax],0x4000
   mov w:[data.VM_TSS.tss_ebx],bx
   mov w:[data.VM_TSS.tss_ecx],cx
   mov ax,w:[dos_vm_call.4]
   mov w:[data.VM_TSS.tss_edx],ax
   xor eax,eax;pop ds

   // prepeare ES:EDI
   xor edi,edi;mov di,w:cs:[dos_vm_call];shl edi,4
   movzx eax,w:cs:[dos_vm_call.4];add edi,eax
   mov ax,mem_all_data;mov es,ax;and ecx,0xFFFF

   // copy write buffer
   rep movsb

   // Call it
   call sys_VM_task

   // All OK?
   { // if (ebx!=0) set(CF)
     cmp ebx,0
     jz down(00)

     pop es;pop ebx;pop ds;pop edi;pop esi
     jmp set_cf
   }
   and  eax,0xFFFF

   // Restore
   pop es;pop ebx;pop ds;pop edi;pop esi
   iret

   // 6. Move file pointer
   //   In:  ah  = 5 ;  bx  = file handle
   //        ecx = distance to move ; al = subfun (start/curr/end)
   //   Out: CF set on error (ax = dos error code)
 SeekFile:
   push ecx;push ds;push ebx

   // prepare registers
   push ds;push eax;mov ax,w:cs:[_ds];mov ds,ax
   pop eax;mov ah,0x42
   mov w:[data.VM_TSS.tss_eax],ax
   mov w:[data.VM_TSS.tss_ebx],bx
   mov w:[data.VM_TSS.tss_edx],cx
   shr  ecx,16
   mov w:[data.VM_TSS.tss_ecx],cx
   xor eax,eax;pop ds

   // Call it
   call sys_VM_task

   // All OK?
   { // if (ebx!=0) set(CF)
     cmp ebx,0
     jz  down(00)

     pop ebx;pop ds;pop ecx
     jmp set_cf
   }
   shl eax,16
   mov ax,w:cs:[data.VM_TSS.tss_edx]
   rol eax,16

   // Restore
   pop ebx;pop ds;pop ecx
   iret

   // 10. FindFirst
   //   In:  ah  = 9
   //        ds:esi - filespec
   //        es:edi - Place for FileInfoRec
   //        cx  = attributes
   //   Out: CF set on error (ax = dos error code)
 find_first:
   push eax;push ebx;push ecx;push ds;push es;push edi;push esi

   // prepare DTA
   push ebx;push ds;push es
   mov ax,w:cs:[_ds];mov ds,ax;mov es,ax
   mov w:[data.VM_TSS.tss_eax],0x1A00
   mov ax,w:[dos_vm_call.4]
   mov w:[data.VM_TSS.tss_edx],ax
   xor eax,eax
   call sys_VM_task
   pop es;pop ds;pop ebx

   // prepare ES:EDI
   xor edi,edi;mov di,w:cs:[dos_vm_call];shl edi,4
   movzx esi,w:cs:[dos_vm_call.4];add edi,esi;add edi,50
   mov si,mem_all_data;mov es,si

   // prepare registers
   push ds;mov si,w:cs:[_ds];mov ds,si
   mov ah,0x4E;mov w:[data.VM_TSS.tss_eax],ax
   mov ax,w:[dos_vm_call.4];add ax,50
   mov w:[data.VM_TSS.tss_edx],ax
   mov w:[data.VM_TSS.tss_ecx],cx
   pop ds;pop esi;push esi

   // Copy filemask to dos buffer
   { lodsb;stosb;cmp al,0;jnz up(00) }

   // Call it
   call sys_VM_task

   pop esi;pop edi;pop es
   { // if (ebx!=0)
     cmp ebx,0
     jz  down(00)

     pop ds;pop ecx;pop ebx;pop eax
     jmp set_cf
   }

   push edi;push esi

   // DS:ESI
   xor esi,esi;mov si,w:cs:[dos_vm_call];shl esi,4
   movzx eax,w:cs:[dos_vm_call.4];add esi,eax
   mov ax,mem_all_data;mov ds,ax

   // Copy received data & save result (44 bytes)
   mov ecx,11;rep movsd

   // Restore
   pop esi;pop edi;pop ds;pop ecx;pop ebx;pop eax
   iret

   // 11. FindNext
   //   In:  ah  = 10
   //        ds:esi - previous FileInfoRec
   //   Out: CF set on error (ax = dos error code)
 find_next:
   push eax;push ebx;push ecx;push es;push edi;push ds;push esi

   // prepare DTA
   push ebx;push ds;push es
   mov ax,w:cs:[_ds];mov ds,ax;mov es,ax
   mov w:[data.VM_TSS.tss_eax],0x1A00
   mov ax,w:[dos_vm_call.4]
   mov w:[data.VM_TSS.tss_edx],ax
   xor eax,eax
   call sys_VM_task
   pop es;pop ds;pop ebx

   // prepare ES:EDI
   xor edi,edi;mov di,w:cs:[dos_vm_call];shl edi,4
   movzx esi,w:cs:[dos_vm_call.4];add edi,esi
   mov si,mem_all_data;mov es,si

   // prepare registers
   push ds;mov si,w:cs:[_ds];mov ds,si
   mov ah,0x4F;mov w:[data.VM_TSS.tss_eax],ax
   mov ax,w:[dos_vm_call.4]
   mov w:[data.VM_TSS.tss_edx],ax
   pop ds;pop esi;push esi

   // Copy FileInfoRec to DOS
   mov ecx,11;rep movsd

   // Call it
   call sys_VM_task

   { // if (ebx!=0)
     cmp ebx,0
     jz  down(00)

     pop esi;pop ds;pop edi;pop es;pop ecx;pop ebx;pop eax
     jmp set_cf
   }

   pop edi;pop es;push es;push edi

   // DS:ESI
   xor esi,esi;mov si,w:cs:[dos_vm_call];shl esi,4
   movzx eax,w:cs:[dos_vm_call.4];add esi,eax
   mov ax,mem_all_data;mov ds,ax

   // Copy received data & save result (44 bytes)
   mov ecx,11;rep movsd

   // Restore
   pop esi;pop ds;pop edi;pop es;pop ecx;pop ebx;pop eax
   iret

 // 1. Display character
 // In: al = char to display
 display_char:

   push ds;push ebx
   mov bx,w:cs:[_ds];cli;mov ds,bx
   mov w:[data.VM_TSS.tss_eax],0x200
   mov w:[data.VM_TSS.tss_edx],ax

   call sys_VM_task

   sti;pop ebx;pop ds
   iret

 // 2. Display string from DS:ESI
 // In: DS:ESI - ptr to ASCIIZ
 display_string:
   push edi;push es;push ebx;push esi

   // prepare ES:EDI
   xor edi,edi;mov di,w:cs:[dos_vm_call];shl edi,4
   movzx esi,w:cs:[dos_vm_call.4];add edi,esi
   mov si,mem_all_data;mov es,si

   // prepare registers
   push ds;mov si,w:cs:[_ds];cli;mov ds,si
   mov ah,0x9;mov w:[data.VM_TSS.tss_eax],ax
   mov ax,w:[dos_vm_call.4]
   mov w:[data.VM_TSS.tss_edx],ax
   pop ds;pop esi;push esi

   // Copy filename to dos buffer
   { lodsb;stosb;cmp al,0;jnz up(00);mov b:es:[~edi-1],'$' }

   // Call it
   call sys_VM_task

   // Restore
   sti;pop esi;pop ebx;pop es;pop edi
   iret

 set_cf:
   push ebp
   mov  ebp,esp
   or   d:[~ebp+12],1
   pop  ebp
   iret

data:
