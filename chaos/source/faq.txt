
 FILE: kernel.bin

 kernel functions (INT 0x20)

 (memory)

  Allocate memory in LDT
     ah=0;ebx=(Size in pages)
     memory for : al=0(ring3), 1(ring0), 2(ring1)   (1&2 only for ring1)
     Out: CF(error) or ax=SEG_of_new_block
  Free memory
     ah=1 ; dx  = SEG to Free
     Out: CF(error)
  Resize memory
     ah=2;ebx = NewSize;dx = SEG of block (in LDT)
     Out: CF(error)
  Allocate Global (ring1)
     ah=6;ebx = size in pages (4096)
     Out: CF set on err (not enough mem, free desc. absent);ax=SEG of global
  Resize Global (ring1)
     ah=7;ebx = NewSize in pages (4096);dx  = SEG of global
     Out: CF(error)
  Free Global (ring1)
     ah=8;dx  = SEG of global
     Out: CF(error)
  Defragment
     ah=9
     Out: <none>
  Get free memory info
     ah=0xA
     Out: edx = free memory
  Map global (ring1)
     ah=0xB;ebx = memory_to_MAP address;dx  = global selector
     Out: CF(if impossible)

 (process)

  Start task (ring1)
     ah=0x28 ; ds=global_segment_with_data
     ecx = task_stacksize ; ebx = memory_size_for_task
     Out: CF set on error

  Terminate process (self)
     ah=0x21

  Kill process
     ah=0x22;bx  = PID
     Out: CF set on error

  Next process
     ah=0x24

  Get priority
     ah=0x25 ; bx=PID
     Out: CF set on error (ax=error) or ax=priority

  Set priority
     ah=0x26 ; bx=PID
     dx=priority
     Out: CF set on error

 (registers)

  Create reg_key
     ah=0x40 ; al=rights ; ebx = base_ID ; ds:esi <- keyname
     Out: CF on error

  Remove reg_key
     ah=0x41 ; ebx = key_id
     Out: CF on error

  Get reg_key
     ah=0x42 ; es:edi <- keyname
     Out: ebx=ID

  Get reg_key data
     ah=0x43 ; ebx=ID
     Out:  CF or { 0 : EAx = dword , 1 : ES:EDI <- buffer, eax = size }

  Set reg_key data
     ah=0x44 ; al = 0(dw) or 1(dat) ; ebx = ID
     switch(al){ case 0 : EDI <- dword ; case 1: DS:ESI <- buffer, cx = size }
     Out: CF

  Get next/sub/up reg_key
     ah=0x45 ; al= +1(next),+2(sub),+4(up) ; ebx = ID
     Out: CF or { eax = Next, edx = sub, edi = up }

  Get register key name
     ah=0x46 ; ebx = ID
     Out: CF or ES:EDI <- buffer, eax = size

 kernel functions (INT 0x21) (ring1)

 (file system) (ring1)

  Create file
     ah=0 ; cx=file_attribute ; ds:esi - Name (ASCIIZ)
     Out: CF (ax = dos error code) or { ax=file_handle }

  Open file
     ah=1 ; al=access mode (0-read, 1-write, 2-r/w) ; ds:esi - Name (ASCIIZ)
     Out: CF (ax = dos error code) or { ax=file_handle }

  Close file
     ah=2 ; bx=file handle
     Out: CF (ax = dos error code|ax=undef)

  Read file
    ah=3 ; bx=file_handle ; cx=bytes_to_read ; es:edi - buffer
    Out: CF (ax = dos error code) or { ax=bytes_actually_readed }

  Write file
    ah=4 ; bx=file_handle ; cx=bytes_to_write(0-truncate) ; ds:esi - buffer
    Out: CF (ax=dos_error_code) or { ax=bytes_actually_written }

  Move file pointer
    ah=5 ; bx=file handle ; ecx=distance to move ; al=subfun (start/curr/end)
    Out: CF (ax = dos error code)

  Find First File
    ah=9 ; ds:esi - filespec ; es:edi - place_for_FileInfoRec ; cx = attributes
    Out: CF (ax = dos error code)

  Find Next File
    ah  = 10 ; ds:esi - previous_FileInfoRec
    Out: CF (ax = dos error code)

 (screen) (ring1)

  Display character
    ah=0x30 ; al=char_to_display

  Display string from DS:ESI
    ah=0x31 ; DS:ESI - ptr to ASCIIZ (without '$')

 kernel functions (INT 0x22)

 (communication with drivers) (ring1)

  Set driver return code (load)
    ah=0 ; al=ret_code
                
  Allocate software interrupt (load)
    ah=1 ; al=intnumber ; CS:EDX = ptr to handler
    Out: CF (if used)

  Allocate hardware interrupt (load)
    ah=2 ; al=IRQ(0-15) ; CS:EDX = ptr to handler
    Out: CF (if used)

  Write to code segment
    ah=3 ; write EBX as dword at CS:EDI

   -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

 FILE: display.bin

 display functions (INT 0x20)

   1. Allocate screen           ah=0               CF or AX = ID
   2. Kill screen               ah=1;bx=ID         CF
   3. Make screen visible       ah=2;bx=ID         CF
   4. Refresh screen            ah=3               <none>
   5. Set screen to write       ah=4;bx=ID         CF
   6. Write char                ah=5;al=char       CF
   7. GotoXY                    ah=6;bh:bl = xy    CF
   8. Get XY                    ah=7;              CF or bh:bl = xy
   13.Write string              ah=0xC;ds:esi<-str <none>
   14.Write chr > syscons       ah=0xD;al=char     CF
   15.Write str > syscons       ah=0xE;ds:esi<-str <none>

   -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

 INT 0x24: (keyb+console)

   1. Read input                ah=0               CF or al=CODE
   2. Read char/code            ah=1               Al=char ; Ah = code
   3. Get keyboard shift status ah=2               AX=bitreg (0-ALT, 1-SHIFT)
   4. Allocate console          ah=3               CF or AX=ID
   5. Free console              ah=4;bx=ID         CF
   6. Change active console     ah=5;bx=ID         CF

   -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

 INT 0x25: (file system)

   1. Create file    In:  ah=0;cx = attr ;  ds:esi - name
                     Out: CF or ax=handle
   2. Open file      In:  ah=1;al=access mode(0-r;1-w;2-r/w); ds:esi - name
                     Out: CF or ax=handle
   3. Close file     In:  ah=2;bx = handle
                     Out: CF
   4. Read file      In:  ah=3; bx=handle;ecx=bytes;es:edi = buffer
                     Out: CF or EAX=BYTES_READ
   5. Write file     In:  ah=4; bx=handle;ecx=bytes;ds:esi = buffer
                     Out: CF or EAX=BYTES_READ
   6. Seek File      In:  ah=5 ; al=subfun ; bx=handle ; ecx = distance
                     Out: CF or EAX = new position
   10. FindFirst     In:  ah=9;ds:esi-filespec;es:edi-FileInfoRec;cx=attr
                     Out: CF set on error
   11. FindNext      In:  ah=10 ; ds:esi - previous FileInfoRec
                     Out: CF set on error
   17. Execute       In:  ah=16 ; ds:esi - file to exec
                     Out: AX=PID or CF set on error

   -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
