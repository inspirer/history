
 FILE: kernel.bin

 kernel functions (INT 0x20)

 (memory)

  Allocate memory in LDT
     ah=0;ebx=(Size in pages)
     memory for : al=0(ring3), 1(ring0), 2(ring1)   (1&2 only for ring1)
     Out: CF(error) or ax=SEG_of_new_block
  Free memory
     ah=1 ; dx  = SEG to Free
     Out: CF(error)
  Resize memory
     ah=2;ebx = NewSize;dx = SEG of block (in LDT)
     Out: CF(error)
  Allocate Global (ring1)
     ah=6;ebx = size in pages (4096)
     Out: CF set on err (not enough mem, free desc. absent);ax=SEG of global
  Resize Global (ring1)
     ah=7;ebx = NewSize in pages (4096);dx  = SEG of global
     Out: CF(error)
  Free Global (ring1)
     ah=8;dx  = SEG of global
     Out: CF(error)
  Defragment
     ah=9
     Out: <none>
  Get free memory info
     ah=0xA
     Out: edx = free memory
  Map global (ring1)
     ah=0xB;ebx = memory_to_MAP address;dx  = global selector
     Out: CF(if impossible)

 (process)

  Start task (ring1)
     ah=0x20 ; ds=global_segment_with_data
     ecx = task_stacksize ; ebx = memory_size_for_task
     Out: CF set on error

  Terminate process (self)
     ah=0x21

  Kill process
     ah=0x22;bx  = PID
     Out: CF set on error

  Next process
     ah=0x24

  Get priority
     ah=0x25 ; bx=PID
     Out: CF set on error (ax=error) or ax=priority

  Set priority
     ah=0x26 ; bx=PID
     dx=priority
     Out: CF set on error

 (message)

  Send message to process
     ah=0x40 ; bx=PID
     edi - message ; ecx:edx - hParam,lParam
     Out: CF (wrong_PID)

  Post message to process
     ah=0x41 ; bx=PID
     edi - message ; ecx:edx - hParam,lParam
     Out: CF (wrong_PID)

   -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

 RING0DRV FUNCTIONs

  (sys_vm_task)

  Create file ("dosCreateFile")
     cx=File attribute;  ds:esi - Name (ASCIIZ)
     Out: CF set on error (ax = dos error code) or ax=file handle

  Open file ("dosOpenFile")
     dl=access mode (0-read, 1-write, 2-r/w); ds:esi - Name (ASCIIZ)
     Out: CF set on error (ax = dos error code) or ax=file handle

  Close file ("dosCloseFile")
     bx=file handle
     Out: CF set on error (ax = dos error code|ax=undef)

  Read file ("dosReadFile")
     bx=file handle; cx  = bytes to read ; es:edi - buffer
     Out: CF set on error (ax = dos error code) or ax = bytes actually read

  Write file ("dosWriteFile")
     bx  = file handle; cx = bytes to write (0-truncate); ds:esi - buffer
     Out: CF set on error (ax = dos error code) or ax=bytes actually written

  Move file pointer ("dosSeekFile")
     bx  = file handle; ecx = distance to move; al = subfun (start/curr/end)
     Out: CF set on error (ax = dos error code)

  FindFirst ("dosFindFirst")
     ds:esi - filespec ; es:edi - Place for FileInfoRec ; cx  = attributes
     Out: CF set on error (ax = dos error code)

  FindNext ("dosFindNext")
     In:  ds:esi - previous FileInfoRec
     Out: CF set on error (ax = dos error code)

  Display character ("dosDisplayChar")
     dl = char to display

  Display string from DS:ESI ("dosDisplayString")
     DS:ESI - ptr to ASCIIZ (without '$')

  (driver_loader)

  Process Task Table ("ProcessTaskTable")
     DS:ESI - table
     Out: CF set on error, DS:ESI - function

  Kernel FATAL shutdown ("errorexit")
     DS:EBX - asciiz (error)

   -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

 RING1DRV FUNCTIONs

  (dosfs)

  Create File ("CreateFile_dosfs")
     cx=File attribute;  ds:esi - Name (ASCIIZ)
     Out: CF set on error (ax = dos error code) or ax=file handle

  Open File ("OpenFile_dosfs")
     dl=access mode (0-read, 1-write, 2-r/w); ds:esi - Name (ASCIIZ)
     Out: CF set on error (ax = dos error code) or ax=file handle

  Close File ("CloseFile_dosfs")
     bx=file handle
     Out: CF set on error (ax = dos error code|ax=undef)

  Read File ("ReadFile_dosfs")
     bx=file handle; ecx  = bytes to read ; es:edi - buffer
     Out: CF set on error (ax = dos error code) or eax = bytes actually read

  (filesys)

  Execute ("execute")
     ds:esi - path_and_name, ds:edi - arguments
     Out: CF if error, else AX = PID

  Create File ("createFile")
  Open File ("openFile")
  Close File ("closeFile")
  Read File ("readFile")
