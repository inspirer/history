 // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
 // FileSystem driver
#code 32
#output fsys.bin

   db "CHAOS",26    // sign [6]
   db "FSYSTEM",0   // Driver name [8]
   dw 0x2           // Size in pages [2]

#shortdef _h_name 0
#shortdef _h_hand _h_name+262
#shortdef _h_attr _h_hand+4
#shortdef _h_task _h_attr+4
#shortdef _h_structure _h_task+4

#shortdef _fir_attr 0   // b
#shortdef _fir_size 4   // 2*d
#shortdef _fir_time 12   // w
#shortdef _fir_date 14  // w
#shortdef _fir_name 16  // [262]
#shortdef _fir_temp 278 // [262]
#shortdef _fir_flag 540 // w
#shortdef _fir_strc 542

#shortdef max_handle_num 100
#shortdef _driver_mem_end_ max_handle_num*_h_structure+10
#shortdef driver_mem _driver_mem_end_/4096+2

#shortdef err_no_support     3
#shortdef err_wrong_info     5
#shortdef err_access_denied  6
#shortdef err_file_not_found 0x80
#shortdef err_no_free_desc   0x81
#shortdef err_unkn_file_sys  0x82
#shortdef err_unkn_read      0x83
#shortdef err_no_more_files  0x84
#shortdef err_not_exe        0x85
#shortdef err_unkn_write     0x86

#shortdef task_sign 0x0
#shortdef task_name 0x3
#shortdef task_stck 0xC
#shortdef task_size 0xE

#shortdef dos_block_read  4096
#shortdef dos_block_write 4096

#org 0
  // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

  // Show cpr
  push cs;pop ds;esi=cpr;ah=0x31;int 0x21

  // Allocate handle buffer
  ah=6;ebx=driver_mem;int 0x20;ds=ax
  bx=ax;edi=mem;ah=3;int 0x22

  // Allocate int25
  ax=0x125;edx=int25;int 0x22

  // Set all handles = free
  ecx=max_handle_num;esi=_h_task
  { w:[esi]=0;esi=+_h_structure;loop ?^0 }

  iret

  // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
int25:
  // Clear CF
  clc
  cli
  cld
  push ebp
  mov  ebp,esp
  and  b:[~ebp+12],0xFE
  pop  ebp
  cmp  ah,0x0  ; _jz create_file
  cmp  ah,0x1  ; _jz open_file
  cmp  ah,0x2  ; _jz close_file
  cmp  ah,0x3  ; _jz read_file
  cmp  ah,0x4  ; _jz write_file
  cmp  ah,0x5  ; _jz seek_file
  cmp  ah,0x9  ; _jz  find_first
  cmp  ah,0xA  ; _jz find_next
  cmp  ah,0x10 ; _jz execute
  mov  ax,err_no_support
set_cf:
  push ebp
  mov  ebp,esp
  or   d:[~ebp+12],1
  pop  ebp
  iret

#shortdef _file_name_full_ _driver_mem_end_+4096

  // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
  // 1. Create file
  //  In:  ah=0; cx = attr
  //       ds:esi - name
  //  Out: CF or ax=handle
create_file:
  { cmp b:[esi],'/';jz ?v0;mov ax,err_wrong_info;jmp set_cf }
  push es;push ds;push esi;push edi;push ecx;push ebx;push ecx

  // Copy file name to buffer
  eax=d:cs:mem;es=ax;edi=_file_name_full_;push edi
  mov eax,'/Roo';stosd;mov al,'t';stosb
  { lodsb;stosb;cmp al,0;jnz ?^0 } push es;pop ds

  // set esi to end
  pop esi;mov edi,esi { lodsb;cmp al,0;jnz ?^0 } dec esi;dec esi

  // ES:EDI - ptr to start ; DS:ESI to end ; search for last "/"
  { // _while(edi<esi)
    cmp edi,esi
    _jge ?v0

    { // _if (b:[esi]=='/')
      cmp b:[esi],'/'
      _jne ?v0
    
      push esi
      mov b:[esi],0
      mov ah,0x42;int 0x20
      { // _if (~nc)
         _jc ?v0

         // Copy to >MEM:_driver_mem_end_< full path + name
         mov edi,_driver_mem_end_
         mov ah,0x43;int 0x20
         { cmp b:[edi],0;jz ?v0;inc edi;jmps ?^0 } inc esi
         { lodsb;stosb;cmp al,0;jnz ?^0 } pop esi

         // Check driver ID
         mov esi,_driver_mem_end_
         _ifelse(d:[esi]=='dos,'){
            lodsd;mov edi,esi

            // Redirect to DOS (int 0x21)
            xor esi,esi;mov ecx,max_handle_num;xor eax,eax
            { if(w:[esi._h_task]==0){ dec eax;jmp ?v1 } add esi,_h_structure;loop ?^0 }

            // No free handle
            { // if(ax==0)
               cmp ax,0;jnz ?v0
               pop ecx;pop ebx;pop ecx;pop edi;pop esi;pop ds;pop es
               mov ax,err_no_free_desc;jmp set_cf
            }

            // DS:ESI - block ; ES:EDI - fname ; save fname
            push ecx;push esi;push edi;xchg esi,edi;mov esi,_file_name_full_
            { lodsb;stosb;cmp al,0;jnz ?^0 }

            // Save task ID
            pop edi;pop esi;str ax;and al,0xF8;mov w:[esi._h_task],ax

            // Create file & save handle
            pop ecx;pop eax;push ecx;mov ecx,eax;mov ah,0;push esi
            mov esi,edi;int 0x21
            {
              jnc ?v0
              pop esi;mov w:[esi._h_task],0
              pop ecx;pop ebx;pop ecx;pop edi;pop esi;pop ds;pop es
              mov ax,err_file_not_found;jmp set_cf
            }
            pop esi;mov w:[esi._h_hand],ax

         } else {

            pop ecx;pop ebx;pop ecx;pop edi;pop esi;pop ds;pop es
            mov ax,err_unkn_file_sys;jmp set_cf

         }

         pop eax;pop ebx;pop ecx;pop edi;pop esi;pop ds;pop es
         iret

      }
      pop esi
      mov b:[esi],0x2F
    }
    dec esi
    jmp ?^0
  }
  pop ecx;pop ebx;pop ecx;pop edi;pop esi;pop ds;pop es
  mov ax,err_file_not_found
  jmp set_cf

  // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
  // 2. Open file
  //  In:  ah=1; al=access mode (0-read,1-write,2-r/w)
  //       ds:esi - name
  //  Out: CF or ax=handle
open_file:
  push eax;mov ah,0xE;int 0x23;mov ax,0xD0A;int 0x23;pop eax
  if (b:[esi]!='/'){ ax=err_wrong_info;jmp set_cf }
       push es;push ds;push esi;push edi;push ecx;push ebx;push eax

       // Copy file name to buffer
       eax=d:cs:mem;es=ax;edi=_file_name_full_;push edi
       mov eax,'/Roo';stosd;al='t';stosb
       { lodsb;stosb;cmp al,0;jnz ?^0 } push es;pop ds

       // set esi to end
       pop esi;edi=esi { lodsb;cmp al,0;jnz ?^0 } dec esi;dec esi

       // ES:EDI - ptr to start ; DS:ESI to end ; search for last "/"
       _while(edi<esi){
         _if (b:[esi]=='/'){
           push esi;b:[esi]=0;
           ah=0x42;int 0x20
           _if (~nc){

              // Copy to >MEM:_driver_mem_end_< full path + name
              edi=_driver_mem_end_
              ah=0x43;int 0x20;while(b:[edi]!=0){ inc edi } inc esi
              { lodsb;stosb;cmp al,0;jnz ?^0 } pop esi

              // Check driver ID
              esi=_driver_mem_end_
              _ifelse(d:[esi]=='dos,'){
                 lodsd;edi=esi

                 // Redirect to DOS (int 0x21)
                 xor esi,esi;ecx=max_handle_num;xor eax,eax
                 { if(w:[esi._h_task]==0){ dec eax;jmp ?v1 } esi=+_h_structure;loop ?^0 }

                 // No free handle
                 if(ax==0){
                    pop eax;pop ebx;pop ecx;pop edi;pop esi;pop ds;pop es
                    ax=err_no_free_desc;jmp set_cf
                 }

                 // DS:ESI - block ; ES:EDI - fname ; save fname
                 push ecx;push esi;push edi;xchg esi,edi;esi=_file_name_full_
                 { lodsb;stosb;cmp al,0;jnz ?^0 }

                 // Save task ID
                 pop edi;pop esi;str ax;and al,0xF8;w:[esi._h_task]=ax

                 // Open file & save handle
                 pop ecx;pop eax;push ecx;push esi;esi=edi;int 0x21
                 if (~c){
                   pop esi;w:[esi._h_task]=0;
                   pop eax;pop ebx;pop ecx;pop edi;pop esi;pop ds;pop es
                   ax=err_file_not_found;jmp set_cf
                 }
                 pop esi;w:[esi._h_hand]=ax

              } else {

                 pop eax;pop ebx;pop ecx;pop edi;pop esi;pop ds;pop es
                 ax=err_unkn_file_sys;jmp set_cf

              }

              pop eax;pop ebx;pop ecx;pop edi;pop esi;pop ds;pop es
              iret

           }
           pop esi;b:[esi]=0x2F
         }
         dec esi
       }
       pop eax;pop ebx;pop ecx;pop edi;pop esi;pop ds;pop es
       ax=err_file_not_found;jmp set_cf

  // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
  // 3. Close file
  //  In:  ah = 2
  //       bx = handle
  //  Out: CF
  close_file:
       if (ebx>max_handle_num||ebx<0){ ax=err_wrong_info;jmp set_cf }

       push eax;push ebx;push ds;push esi;push ecx;esi=d:cs:mem;ds=si

       // Translate handle to normal_handle
       ecx=max_handle_num;xor esi,esi
       while(ecx!=ebx){ ecx=--;esi=+_h_structure }
       str ax;and al,0xF8
       if(w:[esi._h_task]!=ax){
           pop ecx;pop esi;pop ds;pop ebx;pop eax
           ax=err_access_denied;jmp set_cf
       }
       ebx=d:[esi._h_hand]
       ah=2;int 0x21
       w:[esi._h_task]=0

       pop ecx;pop esi;pop ds;pop ebx;pop eax
       iret

  // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
  // 4. Read file
  // In:  ah  = 3
  //      bx  = handle
  //      ecx = bytes
  //      es:edi = buffer
  // Out: CF or EAX=BYTES_READ
  read_file:
       if (ebx>max_handle_num||ebx<0){ ax=err_wrong_info;jmp set_cf }

       push ecx;push edi;push edx;push ebx
       edx=ecx

       // Translate handle to normal_handle
       push ds;push esi;push ecx;esi=d:cs:mem;ds=si
       ecx=max_handle_num;xor esi,esi
       while(ecx!=ebx){ ecx=--;esi=+_h_structure }
       str ax;and al,0xF8
       if(w:[esi._h_task]!=ax){
           pop ecx;pop esi;pop ds;pop ebx;pop edx;pop edi;pop ecx
           ax=err_access_denied;jmp set_cf
       }
       ebx=d:[esi._h_hand]
       pop ecx;pop esi;pop ds

       // Read data
       while(edx>0){
          ecx=dos_block_read
          if (ecx>edx){ ecx=edx }
          edx=-ecx
          ah=3;int 0x21
          if (~c){
             pop ebx;pop edx;pop edi;pop ecx
             ax=err_unkn_read;jmp set_cf
          }
          eax=&0xFFFF
          edi=+eax
          if(eax==0){ jmp ?v1 }
       }
       eax=edi

       pop ebx;pop edx;pop edi;pop ecx;eax=-edi
       iret

  // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
  // 5. Write file
  // In:  ah  = 4
  //      bx  = handle
  //      ecx = bytes
  //      ds:esi = buffer
  // Out: CF or EAX=BYTES_READ
  write_file:
       if (ebx>max_handle_num||ebx<0){ ax=err_wrong_info;jmp set_cf }

       push ecx;push esi;push edx;push ebx
       edx=ecx

       // Translate handle to normal_handle
       push ds;push esi;push ecx;esi=d:cs:mem;ds=si
       ecx=max_handle_num;xor esi,esi
       while(ecx!=ebx){ ecx=--;esi=+_h_structure }
       str ax;and al,0xF8
       if(w:[esi._h_task]!=ax){
           pop ecx;pop esi;pop ds;pop ebx;pop edx;pop esi;pop ecx
           ax=err_access_denied;jmp set_cf
       }
       ebx=d:[esi._h_hand]
       pop ecx;pop esi;pop ds

       // write data
       while(edx>0){
          ecx=dos_block_write
          if (ecx>edx){ ecx=edx }
          edx=-ecx
          ah=4;int 0x21
          if (~c){
             pop ebx;pop edx;pop esi;pop ecx
             ax=err_unkn_write;jmp set_cf
          }
          eax=&0xFFFF
          esi=+eax
          if(eax==0){ jmp ?v1 }
       }
       eax=esi

       pop ebx;pop edx;pop esi;pop ecx;eax=-esi
       iret

  // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
  // 6. Seek File
  // In:  ah  = 5 ; al = subfun ; bx  = handle
  //      ecx = distance
  // Out: CF or EAX = new position
  seek_file:
       if (ebx>max_handle_num||ebx<0){ ax=err_wrong_info;jmp set_cf }

       push ebx

       // Translate handle to normal_handle
       push eax;push ds;push esi;push ecx;esi=d:cs:mem;ds=si
       ecx=max_handle_num;xor esi,esi
       while(ecx!=ebx){ ecx=--;esi=+_h_structure }
       str ax;and al,0xF8
       if(w:[esi._h_task]!=ax){
           pop ecx;pop esi;pop ds;pop eax;pop ebx
           ax=err_access_denied;jmp set_cf
       }
       ebx=d:[esi._h_hand]
       pop ecx;pop esi;pop ds;pop eax

       // Set new position
       mov  ah,5
       int  0x21

       if (~c){
         pop ebx;jmp set_cf
       }

       pop ebx
       iret

 #shortdef _file_info_rec_ _file_name_full_

  // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
  // 10. FindFirst
  //   In:  ah  = 9
  //        ds:esi - filespec ("/temp/*.*")
  //        es:edi - Place for FileInfoRec
  //        cx  = attributes
  //   Out: CF set on error (ax = dos error code)
  find_first:
       if (b:[esi]!='/'){ ax=err_wrong_info;jmp set_cf }
       push es;push eax;push edi;push ecx;push ebx;push ds;push esi;
         push es;push edi;push ecx

       // Copy file name to buffer
       eax=d:cs:mem;es=ax;edi=_file_name_full_;push edi
       mov eax,'/Roo';stosd;al='t';stosb
       { lodsb;stosb;cmp al,0;jnz ?^0 } push es;pop ds

       // set esi to end
       pop esi;edi=esi { lodsb;cmp al,0;jnz ?^0 } dec esi;dec esi

       // search for last "/"
       while(b:[esi]!='/'){ dec esi }
       pop ecx;push ecx;and cl,128;push esi;push edi;b:[esi]=0;
       ah=0x42;int 0x20
       _if(~nc&&cl!=0){

         // Get sub key
         push edx;ax=0x4502;int 0x20;ebx=edx;pop edx;inc esi

         if (ebx==0xFFFFFFFF){ jmp ?v1 }
         {
            _search_next_key:
            edi=_driver_mem_end_;ah=0x46;int 0x20

            // Compare _driver_mem_end_(name,edi) & esi(mask)
            push esi
            {
               if(b:[esi]==0||b:[edi]==0){
                 cmpsb
                 if(~z){ clc;jmp ?v2 }
                 stc;jmp ?v1
               }
               if(b:[esi]=='?'){ inc esi;inc edi;jmps ?^1 }
               if(b:[esi]=='*'){
                 inc esi;al=b:[esi];
                 while(b:[edi]!=al&&b:[edi]!=0){ inc edi }
                 if(b:[edi]==0&&al=='.'){ while(b:[esi]!=0){ inc esi } }
                 jmps ?^1
               }
               cmpsb
               jz ?^0
               stc
            }
            pop esi
            if (~nc){

              // found
              pop edi;pop esi;pop ecx;pop edi;pop es

              // Creating table at ES:EDI
              w:es:[edi._fir_flag]=1
              d:es:[~edi._fir_size]=0;d:es:[~edi._fir_size.4]=0
              d:es:[~edi._fir_time]=0
              b:es:[~edi._fir_attr]=0x80
              push edi;esi=_driver_mem_end_;edi=+_fir_name;
              { lodsb;stosb;cmp al,0;jnz ?^0 } pop edi

              // Creating special info (KEY_ID, ATTR, MASK)
              d:es:[edi._fir_temp]=ebx;d:es:[edi._fir_temp.4]=ecx;
              add edi,_fir_temp+8;pop esi;pop ds;push esi
              { lodsb;stosb;cmp al,0;jnz ?^0 }

              pop esi;pop ebx;pop ecx;pop edi;pop eax;pop es
              iret
            }

            // not found (ebx - current), search next
            clc;ax=0x4501;int 0x20;ebx=eax
            if (ebx!=0xFFFFFFFF){ jmp _search_next_key }
         }
       }
       pop edi;pop esi;b:[esi]=0x2F

       // ES:EDI - ptr to start ; DS:ESI to end
       _while(edi<esi){
         _if (b:[esi]=='/'){
           push esi;b:[esi]=0;
           ah=0x42;int 0x20
           _if (~nc){

              // Copy to >MEM:_driver_mem_end_< full path + name
              edi=_driver_mem_end_
              ah=0x43;int 0x20;while(b:[edi]!=0){ inc edi } inc esi
              { lodsb;stosb;cmp al,0;jnz ?^0 } pop esi

              // Check driver ID
              esi=_driver_mem_end_
              _ifelse(d:[esi]=='dos,'){
                 lodsd

                 // find first
                 pop ecx;edi=_file_info_rec_;ah=9;int 0x21;pop edi;pop es
                 if(~c){
                    pop esi;pop ds;pop ebx;pop ecx;pop edi;pop eax;pop es
                    ax=err_no_more_files;jmp set_cf
                 }

                 // Save structure
                 esi=_file_info_rec_;push edi;push esi;ecx=11;edi=+_fir_temp
                 rep movsd;pop esi;pop edi

                 // Save other params
                 al=b:[~esi.0x15];b:es:[~edi._fir_attr]=al
                 d:es:[~edi._fir_size.4]=0;w:es:[edi._fir_flag]=0
                 eax=d:[~esi.0x1A];d:es:[~edi._fir_size]=eax
                 eax=d:[~esi.0x16];d:es:[~edi._fir_time]=eax
                 edi=+_fir_name;esi=+0x1E;
                 { lodsb;stosb;cmp al,0;jnz ?^0 }

              } else {

                 pop ecx;pop edi;pop es;pop esi;pop ds;pop ebx;pop ecx;pop edi;pop eax;pop es
                 ax=err_unkn_file_sys;jmp set_cf

              }

              pop esi;pop ds;pop ebx;pop ecx;pop edi;pop eax;pop es
              iret

           }
           pop esi;b:[esi]=0x2F
         }
         dec esi
       }
       pop ecx;pop edi;pop es;pop esi;pop ds;pop ebx;pop ecx;pop edi;pop eax;pop es
       ax=err_file_not_found;jmp set_cf


  // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
  // 11. FindNext
  //   In:  ah  = 10
  //        ds:esi - previous FileInfoRec
  //   Out: CF set on error (ax = dos error code)
  find_next:
       push es;push edi;push eax;push ebx;push ecx;push ds;push esi

       _ifelse(d:[esi._fir_flag]!=0){

          // Search in registers, _fir_temp=(KEY_ID, ATTR, MASK)
          ebx=d:[esi._fir_temp];
          _search_next_reg_: ax=0x4501;int 0x20;ebx=eax

          ifelse(ebx==0xFFFFFFFF){

             // No more in regs => find first (clear search_reg flag)
             ecx=d:[esi._fir_temp.4];and cl,0x7F;ah=9
             push ds;pop es;edi=esi;add esi,_fir_temp+8
             int 0x25
             if (~c){ pop esi;pop ds;pop ecx;pop ebx;pop edi;pop edi;pop es;jmp set_cf }
             pop esi;pop ds;pop ecx;pop ebx;pop eax;pop edi;pop es
             iret

          } else {

             // Setup regs
             push es;push edi;push esi;edi=d:cs:mem;es=di;edi=_file_name_full_
             add esi,_fir_temp+8 { lodsb;stosb;cmp al,0;jnz ?^0 } pop esi
             push ds;push esi;esi=_file_name_full_;push es;pop ds

             // Set esi to start of mask
             push edi;while(b:[esi]!=0){ if(b:[esi]=='/'){ edi=esi }inc esi }
             esi=edi;pop edi;esi=++

             // EBX=KEY_ID, ES:,DS: -> driver temp memory
             {
                edi=_driver_mem_end_;ah=0x46;int 0x20

                // Compare _driver_mem_end_(name,edi) & esi(mask)
                push esi
                {
                   if(b:[esi]==0||b:[edi]==0){
                     cmpsb
                     if(~z){ clc;jmp ?v2 }
                     stc;jmp ?v1
                   }
                   if(b:[esi]=='?'){ inc esi;inc edi;jmps ?^1 }
                   if(b:[esi]=='*'){
                     inc esi;al=b:[esi];
                     while(b:[edi]!=al&&b:[edi]!=0){ inc edi }
                     if(b:[edi]==0&&al=='.'){ while(b:[esi]!=0){ inc esi } }
                     jmps ?^1
                   }
                   cmpsb
                   jz ?^0
                   stc
                }
                pop esi
                if (~nc){

                  // found, restore DS:ESI as ES:EDI
                  pop edi;pop es;

                  // Creating table at ES:EDI
                  w:es:[edi._fir_flag]=1
                  d:es:[~edi._fir_size]=0;d:es:[~edi._fir_size.4]=0
                  d:es:[~edi._fir_time]=0
                  b:es:[~edi._fir_attr]=0x80
                  push edi;esi=_driver_mem_end_;edi=+_fir_name;
                  { lodsb;stosb;cmp al,0;jnz ?^0 } pop edi

                  // Creating special info (KEY_ID)
                  d:es:[edi._fir_temp]=ebx

                  pop edi;pop es;pop esi;pop ds;pop ecx;pop ebx;pop eax;pop edi;pop es
                  iret
                }

                // not found (ebx - current), search next
                clc;esp=+16;jmp _search_next_reg_
             }
          }

       } else {

          // Normal call to DOS
          ah=10;edi=esi;esi=+_fir_temp;int 0x21;push ds;pop es

          // Error => exit
          if(~c){
             pop esi;pop ds;pop ecx;pop ebx;pop edi;pop edi;pop es
             jmp set_cf
          }

          // Save info
          al=b:[~esi.0x15];b:[~edi._fir_attr]=al
          d:[~edi._fir_size.4]=0;w:[edi._fir_flag]=0
          eax=d:[~esi.0x1A];d:[~edi._fir_size]=eax
          eax=d:[~esi.0x16];d:[~edi._fir_time]=eax
          edi=+_fir_name;esi=+0x1E;{ lodsb;stosb;cmp al,0;jnz ?^0 }

          pop esi;pop ds;pop ecx;pop ebx;pop eax;pop edi;pop es
          iret

       }

  // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
  // 17. Execute
  //   In:  ah  = 0x10
  //        ds:esi - file to exec
  //   Out: AX=PID or CF set on error
  execute:
       push es;push ebx;push ecx;push edx;push edi;push esi

       // Open file
       ax=0x100;int 0x25;ebx=eax
       if (~c){
          ax=err_file_not_found;
         _task_not_loaded:
          pop esi;pop edi;pop edx;pop ecx;pop ebx;pop es
          jmp set_cf
       }

       // Get task header
       eax=d:cs:mem;es=ax
       edi=_driver_mem_end_;ecx=16;ah=3;int 0x25

       // Check task
       if (ax!=16||w:es:_driver_mem_end_.task_sign!='CE'){ ax=err_not_exe;jmps _task_not_loaded }

       // Allocate memory for main task
       push ebx;ah=6;xor ebx,ebx;bx=w:es:_driver_mem_end_.task_size;int 0x20
       pop ebx;if(~c){jmps _task_not_loaded} push eax
       xor ecx,ecx;mov cx,w:es:_driver_mem_end_.task_stck;push ecx
       xor ecx,ecx;mov cx,w:es:_driver_mem_end_.task_size;push ecx;shl ecx,12
       es=ax

       // Read task
       xor edi,edi;ah=3;int 0x25
       ah=2;int 0x25

       // Run task
       pop ebx;pop ecx;push ds;push es;pop ds;ah=0x20;int 0x20;pop ds
       if (~c){
          pop edx;ah=8;int 0x20
          pop esi;pop edi;pop edx;pop ecx;pop ebx;pop es;jmp set_cf
       }

       // Restore regs
       pop edx;ah=8;int 0x20
       pop esi;pop edi;pop edx;pop ecx;pop ebx;pop es
       iret

  // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

cpr: db "ChaOS File System device driver",13,10,0
mem: dd 0
