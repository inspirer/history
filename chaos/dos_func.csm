 // dos_call support

 dos_call:
   pusha // Save all registers + SegReg
   push ds;push es;push fs;push gs
   ax=mem_kernel_data;ds=ax
   ax=ss;w:dos_stack_ss=ax    // Save stack pointer
   d:dos_stack_sp=esp
   //sldt ax;w:dos_ldt=ax
   //str ax;w:dos_tr=ax
   push ds;pop ss;esp=dos_func_stack
   ebx=dos_ret
   jmp dcall

  dos_ret:
   ax=cs:w:dos_stack_ss;ss=ax // Restore stack pointer
   esp=cs:d:dos_stack_sp
   enable_int_system()
   //ax=cs:w:dos_ldt;lldt ax
   //ax=cs:w:dos_tr;ltr ax
   pop gs;pop fs;pop es;pop ds
   popa  // Restore all registers + SegReg
   ret

 dos_stack_sp: dd 0
 dos_stack_ss: dw 0
 dos_mem:   dd 0
 dos_ldt:   dw 0
 dos_tr:    dw 0

 #shortdef dos_ax   0
 #shortdef dos_bx   2
 #shortdef dos_cx   4
 #shortdef dos_dx   6
 #shortdef dos_si   8
 #shortdef dos_di   10
 #shortdef dos_mem1 12
 #shortdef dos_mem2 128

  // Writeln string from DS:ESI - string
  write:
    push es;push eax
    ax=mem_all_data;es=ax;edi=d:dos_mem

    w:es:[~edi.dos_ax]=0x900
    w:es:[~edi.dos_dx]=0xFFFF
    edi=+dos_mem1

    { lodsb;stosb;cmp al,'$';jnz ?^0 }

    dos_call()

    pop eax;pop es
    ret

  write_char: // al - char

    //push ds;push ebx
    //bx=mem_kernel_data;ds=bx

    //w:[VM_TSS.tss_eax]=0x200
    //w:[VM_TSS.tss_edx]=ax

    //call_VM_task()

    //pop ebx;pop ds

    push es;push edi;push eax
    ax=mem_all_data;es=ax;edi=d:cs:dos_mem
    pop eax

    w:es:[~edi.dos_ax]=0x200
    w:es:[~edi.dos_dx]=ax
    pop edi

    dos_call()
    pop es
    ret
