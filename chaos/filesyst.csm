// File system routines

  exc_21:
    cmp ah,0
    jz  CreateFile
    cmp ah,1
    jz  OpenFile
    jmp _fs01

    // 1. Create file
    //   In:  ah  = 0 ; cx  = File attribute
    //        ds:esi - Name (ASCIIZ)
    //   Out: CF set on error (ax = dos error code)
    //        ax  = file handle
  CreateFile:
    push edi;push es;push esi

    ax=0x20;es=ax;edi=d:es:dos_mem;ax=0x28;es=ax // ES:EDI = Dos

    w:es:[~edi.dos_ax]=0x3C00
    w:es:[~edi.dos_cx]=cx
    w:es:[~edi.dos_dx]=0xFFFF

    push edi

    // Copy filename to dos buffer
    edi=+dos_mem1
    { lodsb;stosb;cmp al,0;jnz ?^0 }

    // Create it
    dos_call()

    pop edi
    ax=w:es:[~edi.dos_ax]
    pop esi;pop es;pop edi
    iret

    // 2. Open file
    //   In:  ah  = 1
    //        al  = access mode (0-read, 1-write, 2-r/w)
    //        ds:esi - Name (ASCIIZ)
    //   Out: CF set on error (ax = dos error code)
    //        ax  = file handle
  OpenFile:
    push edi;push es;push esi

    push ax
    ax=0x20;es=ax;edi=d:es:dos_mem;ax=0x28;es=ax // ES:EDI = Dos
    pop ax

    ah=0x3D;w:es:[~edi.dos_ax]=ax
    w:es:[~edi.dos_dx]=0xFFFF

    push edi

    // Copy filename to dos buffer
    edi=+dos_mem1
    { lodsb;stosb;cmp al,0;jnz ?^0 }

    // Open it
    dos_call()

    pop edi
    ax=w:es:[~edi.dos_ax]
    pop esi;pop es;pop edi
    iret

    // 3. Close file
    //   In:  ah  = 2 ; bx  = file handle
    //   Out: CF set on error (ax = dos error code)
  CloseFile:
    push edi;push es

    ax=0x20;es=ax;edi=d:es:dos_mem;ax=0x28;es=ax // ES:EDI = Dos

    w:es:[~edi.dos_ax]=0x3E00
    w:es:[~edi.dos_bx]=bx

    // Close
    dos_call()

    ax=w:es:[~edi.dos_ax]
    pop es;pop edi
    iret

    // 4. Read file
    //   In:  ah  = 3
    //        bx  = file handle
    //        cx  = bytes to read
    //        es:edi - buffer
    //   Out: CF set on error (ax = dos error code)
    //        ax  = bytes actually read
  ReadFile:
    push ds;push edi;push es

    ax=0x20;es=ax;edi=d:es:dos_mem;ax=0x28;ds=ax // ES = Kernel ; DS = Dos

    w:[~edi.dos_ax]=0x3F00
    w:[~edi.dos_bx]=bx
    w:[~edi.dos_cx]=cx
    w:[~edi.dos_dx]=0xFFFF

    dos_call()

    esi=edi+dos_mem1
    pop es;pop edi

    // Copy received string & save result
    push ecx;rep movsb;pop ecx
    ax=w:[~edi.dos_ax]

    pop ds
    iret

  _fs01: // Continue check
    cmp ah,2
    jz  CloseFile
    cmp ah,3
    jz  ReadFile
    cmp ah,4
    jz  WriteFile
    cmp ah,14
    jz  GetCurDir
    xor eax,eax
    iret

    // 5. Write file
    //   In:  ah  = 4 ;  bx  = file handle
    //        cx  = bytes to write (0-truncate)
    //        ds:esi - buffer
    //   Out: CF set on error (ax = dos error code)
    //        ax  = bytes actually written
  WriteFile:
    push edi;push es;push esi

    ax=0x20;es=ax;edi=d:es:dos_mem;ax=0x28;es=ax // ES:EDI = Dos

    w:es:[~edi.dos_ax]=0x4000
    w:es:[~edi.dos_bx]=bx
    w:es:[~edi.dos_cx]=cx
    w:es:[~edi.dos_dx]=0xFFFF

    push edi;push ecx

    // Copy data to dos buffer
    edi=+dos_mem1;and ecx,0xFFFF
    rep movsb;pop ecx

    // Create
    dos_call()

    pop edi
    ax=w:es:[~edi.dos_ax]
    pop esi;pop es;pop edi
    iret

    // 15. Get current directory
    //   In:  ah  = 14 ; dl  = drive number
    //        es:edi - place for it
    //   Out: CF set on error (ax = dos error code)
  GetCurDir:
    push ds;push edi;push es

    ax=0x20;es=ax;edi=d:es:dos_mem;ax=0x28;ds=ax // ES = Kernel ; DS = Dos

    w:[~edi.dos_ax]=0x4700
    w:[~edi.dos_si]=0xFFFF
    w:[~edi.dos_dx]=dx

    dos_call()

    esi=edi+dos_mem1
    pop es;pop edi

    // Copy received string & save result
    { lodsb;stosb;cmp al,0;jnz ?^0 }
    ax=w:[~edi.dos_ax]

    pop ds
    iret
